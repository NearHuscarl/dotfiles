#!/bin/bash

# key binding
bind '"\eh": "fh\n"'
bind '"\ee": "fe\n"'
bind '"\ef": "ff\n"'
bind '"\ed": "fd\n"'

# wrapper alias to set up fzf
alias fzf='
   fzf \
      --multi \
      --no-mouse \
      --cycle \
      --reverse \
      --color=info:6,bg+:8,hl+:1,hl:3,pointer:6,marker:1,spinner:6 \
      --bind=alt-k:up,alt-j:down,alt-i:abort,alt-h:backward-char,alt-l:forward-char,alt-n:backward-word,alt-m:forward-word,alt-e:jump,alt-t:kill-line,alt-v:toggle'

fe() {
   file=$(find $HOME -type f \( \
      ! -iname "*.png" \
      ! -iname "*.jpg" \
      ! -iname "*.mp3" \
      ! -iname "*.dbx" \
      ! -iname "*.db" \
      ! -path "*vim/undo/*" \
      \) \
      | fzf --preview="cat {}") && vim "$file"
}

fee() {
   file=$(rg $HOME/bin $HOME/.config --files --no-ignore --hidden --follow --no-messages \
      | fzf --preview="cat {}") && vim "$file"
}

ff() {
   file=$(find $HOME -type f \( \
      ! -iname "*.dbx" \
      ! -iname "*.db" \
      ! -path "*vim/undo/*" \
      \) | fzf --preview="cat {}") && xdg-open "$file"
}

fd() {
  local dir
  dir=$(find ${1:-$HOME} -type d -print 2> /dev/null | fzf +m --preview="ls {}") &&
  cd "$dir"
}

fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

# fco - checkout git commit
fco() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# search song (using mpd)
fmpd() {
  local song_position
  song_position=$(mpc -f "%position%) %artist% - %title%" playlist | \
    fzf-tmux --query="$1" --reverse --select-1 --exit-0 | \
    sed -n 's/^\([0-9]\+\)).*/\1/p') || return 1
  [ -n "$song_position" ] && mpc -q play $song_position
}

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% "$@" --border
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}

gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}
Raw
