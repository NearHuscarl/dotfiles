#!/bin/env bash

# Usage:
# $ ./peek

# Dependencies:
# peek
# rofi
# i3_fullscreen

SCRIPT_NAME=$(basename "$0")
USAGE="Usage: $SCRIPT_NAME [help]"
HELP="\
$SCRIPT_NAME [<command>]
Open rofi menu to start stop or toggle recording gif
Commands:
  h, help      print this help message"

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

PEEK_OPTS=(
'Toggle
Start
Stop
Fullscreen
Exit'
)

BOOL_OPT=(
'Yes
No'
)

function die() { # {{{
	echo "$*" >&2
	exit 1
}
# }}}
function usage() { # {{{
	die "$USAGE"
}
# }}}
function help() { # {{{
	echo "$HELP"
}
# }}}
function peek_menu() { # {{{
	local action
	action="$(echo "${PEEK_OPTS[*]}" | rofi -i -dmenu -p 'Peek: ')"
	if [[ "$action" == Exit ]]; then
		killall peek 2> /dev/null
		exit 0
	fi
	if pgrep -x 'peek' > /dev/null; then
		case "$action" in
			Start)
				peek --no-headerbar --start
				;;
			Stop)
				peek --no-headerbar --stop
				;;
			Toggle)
				peek --no-headerbar --toggle
				;;
			Fullscreen)
				i3_fullscreen title=Peek # see https://github.com/phw/peek/issues/61
				;;
			*)
				;;
		esac
	else
		action="$(echo "${BOOL_OPT[*]}" | rofi -i -scroll-method 0 -dmenu -p 'Peek is not running yet. Open Peek? ')"
		if [[ "$action" == No ]]; then
			exit 0
		else
			peek --no-headerbar &
		fi
	fi
}
# }}}
function main() { # {{{
	local cmd="${1:-}"

	case "$#" in
		0)
			peek_menu ;;
		*)
			case "$cmd" in
				h|help)
					help ;;
				*)
					usage ;;
			esac
	esac
}

main "$@"
# }}}
