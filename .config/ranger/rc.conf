# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create the file
# ~/.config/ranger/rc.conf and add your custom commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================

# ===================================================================
# == Options
# ===================================================================

# Option {{{
# Which viewmode should be used?  Possible values are:
#     miller: Use miller columns which show multiple levels of the hierarchy
#     multipane: Midnight-commander like multipane view showing all tabs next
#                to each other
set viewmode miller
# set viewmode multipane

# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden true

# Ask for a confirmation when running the "delete" command?
# Valid values are "always", "never", "multiple" (default)
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete multiple

# Which script is used to generate file previews?
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.
set preview_script ~/.config/ranger/scope.sh

# Use the external preview script or display simple plain text or image previews?
set use_preview_script true

# Automatically count files in the directory, even before entering them?
set automatically_count_files true

# Open all images in this directory when running certain image viewers
# like feh or sxiv?  You can still open selected files by marking them.
set open_all_images true

# Be aware of version control systems and display information.
set vcs_aware true

# State of the three backends git, hg, bzr. The possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_hg disabled
set vcs_backend_bzr disabled

# Use one of the supported image preview protocols
set preview_images false

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
#
# * urxvt:
#   Preview images in full color using urxvt image backgrounds. This
#   requires using urxvt compiled with pixbuf support.
#
# * urxvt-full:
#   The same as urxvt but utilizing not only the preview pane but the
#   whole terminal window.
set preview_images_method w3m

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis false

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Which colorscheme to use?  These colorschemes are available by default:
# default, jungle, snow, solarized
set colorscheme flat

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview false

# Save the console history on exit?
set save_console_history true

# Draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar true

# Draw borders around columns?
set draw_borders true

# Display the directory name in tabs?
set dirname_in_tabs false

# Enable the mouse support?
set mouse_enabled true

# Display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar true

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# Set a title for the window?
set update_title true

# Set the title to "ranger" in the tmux program?
set update_tmux_title true

# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar false

# How many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 50

# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# Flush the input after each key hit?  (Noticeable when ranger lags)
set flushinput true

# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right true

# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Turning this on makes sense for screen readers:
set show_cursor false

# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

# Enable this if key combinations with the Alt Key don't work for you.
# (Especially on xterm)
set xterm_alt_key false

# Whether to include bookmarks in cd command
set cd_bookmarks true

# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to
# disable this feature.
set preview_max_size 0

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000

# When the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

# Clear all existing filters when leaving a directory
set clear_filters_on_dir_change true

# Disable displaying line numbers in main column
set line_numbers relative
# }}}

# ===================================================================
# == Local Options
# ===================================================================

# Local option {{{
# You can set local options that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime
setlocal path=~/.local/share/Trash/ sort=atime
# }}}

# ===================================================================
# == Command Aliases in the Console
# ===================================================================

# Alias {{{
alias e    edit
alias q    quit
alias q!   quitall
alias qa   quitall
alias qall quitall
alias setl setlocal

alias filter     scout -prt
alias find       scout -aeit
alias mark       scout -mr
alias unmark     scout -Mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefiklst
# }}}

# ===================================================================
# == Define keys for the browser
# ===================================================================

# Basic {{{
map     Q quit!
map     q quit
copymap q ZZ ZQ


# map R     reload_cwd
map <C-r> reset
map <C-l> redraw_window
map <C-c> abort
map <esc> change_mode normal
map ~ set viewmode!

map . display_file
map ? help
map W display_log
map w taskview_open
# }}}
# Shell {{{
map Sh shell $SHELL
# $HOME/bin/export
map sh shell $TERMINAL
# }}}
# Console {{{
map :  console
map ;  console
map !  console shell%space
map @  console -p6 shell  %%s
map #  console shell -p%space
map o  console open_with%space
map O  chain draw_possible_programs; console open_with%%space
map cd console cd%space
# }}}
# Change the line mode {{{
map Mf linemode filename
map Mi linemode fileinfo
map Mm linemode mtime
map Mp linemode permissions
map Ms linemode sizemtime
map Mt linemode metatitle
# }}}
# Tagging / Marking {{{
map T       tag_toggle
map ut      tag_remove
map "<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True

map v       chain mark_files toggle=True; move up=1
map V       mark_files all=True toggle=True
map <a-v>   toggle_visual_mode
map uv      toggle_visual_mode reverse=True
map uV      mark_files all=True val=False
# }}}
# For the nostalgics: Midnight Commander bindings {{{
map <F1> help
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir%space
map <F8> console delete
map <F10> exit
# }}}
# In case you work on a keyboard with dvorak layout {{{
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <CR>       move right=1
#map <DELETE>   console delete
map <INSERT>   console touch%space
# }}}
# VIM-like {{{
copymap <UP>       k
copymap <DOWN>     j
copymap <LEFT>     h
copymap <RIGHT>    l
copymap <HOME>     gg
copymap <END>      G
copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>

map J  move down=0.5  pages=True
map K  move up=0.5    pages=True
copymap J <C-D>
copymap K <C-U>
# }}}
# Jumping around {{{
map <a-h> history_go -1
map <a-l> history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse
# }}}
# Change directory {{{
map gh cd ~
map ge cd /etc
map gu cd /usr
map gl cd -r .
map gL cd -r %f
map go cd /opt
map gm cd /run/media
map gM cd /mnt
map gr cd /
map gR eval fm.cd(ranger.RANGERDIR)
map g/ cd /
map g? cd /usr/share/doc/ranger

map gb  cd ~/bin/
map gcc cd /var/cache/pacman/
map gcf cd ~/.config/
map gdf cd ~/dotfiles/
map gdt cd ~/Desktop/
map gdl cd ~/Downloads/
map gio cd ~/Github/NearHuscarl.github.io/
map gG  cd ~/Github/
map gp  cd ~/Pictures/
map gsc cd ~/Documents/school/
map gsd cd /etc/systemd/
map gt  cd ~/.local/share/Trash/
map gv  cd ~/.vim/
map gV  cd /usr/share/vim/
# }}}
# External Programs {{{
map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
# }}}
# Insert more (type yourself to see what it means) {{{
map i1 flat 1
map i2 flat 2
map i3 flat 3
map ii flat 0
copymap ii i0
# }}}
# Rename {{{
map r console rename%space
map R bulkrename
map a rename_append
map A eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map I eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)
# }}}
# Paste {{{
map Pp paste
map Pl paste_symlink relative=False

map pp chain paste; uncut
map po chain paste overwrite=True; uncut
map pP chain paste append=True; uncut
map pO chain paste overwrite=True append=True; uncut
map pl chain paste_symlink relative=False; uncut
map pL chain paste_symlink relative=True; uncut
map phl chain paste_hardlink; uncut
map pht chain paste_hardlinked_subtree; uncut
# }}}
# Delete {{{
map de shell -s trash-put %s
map dE shell -r trash-put %s
map dr shell -w trash-restore
map d! shell -r rm -drI %s
map ul shell unlink %s
map uL shell -r unlink %s
# }}}
# Move {{{
map dD console shell -r mv %c %d/
map dd cut mode=toggle
map ud uncut
map da cut mode=add
# map dr cut mode=remove
map dt cut mode=toggle

# Temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
# }}}
# Yank {{{
map yy copy mode=toggle
map yY console shell -r cp %c %d/
map uy uncut
map ya copy mode=add
map yr copy mode=remove
map yt copy mode=toggle

# Yank path, file name
map yp shell -f echo -n %d/%f | xclip -in -selection clipboard; xclip -out -selection clipboard | xclip -in -selection primary
map yd shell -f echo -n %d    | xclip -in -selection clipboard; xclip -out -selection clipboard | xclip -in -selection primary
map yf shell -f echo -n %f    | xclip -in -selection clipboard; xclip -out -selection clipboard | xclip -in -selection primary

# Temporary workarounds
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)
# }}}
# New file/folder {{{
map md console mkdir%space
map mf console touch%space
# }}}
# Mounting {{{
map 
map mC  shell udisksctl mount   -b /dev/sda1
map mD  shell udisksctl mount   -b /dev/sda5
map mE  shell udisksctl mount   -b /dev/sda6
map umC shell udisksctl unmount -b /dev/sda1
map umD shell udisksctl unmount -b /dev/sda5
map umE shell udisksctl unmount -b /dev/sda6
# }}}
# Searching {{{
map /  console search%space
map n  search_next
map N  search_next forward=False
map ?t search_next order=tag
map ?s search_next order=size
map ?i search_next order=mimetype
map ?c search_next order=ctime
map ?m search_next order=mtime
map ?a search_next order=atime

map f  console find%space
map F  fzf_select
# }}}
# Tabs {{{ 
map <C-n>     tab_new ~
map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map uq        tab_restore

map t1     tab_open 1
map t1     tab_open 1
map t2     tab_open 2
map t3     tab_open 3
map t4     tab_open 4
map t5     tab_open 5
map t6     tab_open 6
map t7     tab_open 7
map t8     tab_open 8
map t9     tab_open 9

map tn        tab_new ~
map tc        tab_close
map L         tab_move 1
map H         tab_move -1
# }}}
# Sorting {{{
map sr set sort_reverse!
map sz set sort=random
map ss chain set sort=size;      set sort_reverse=False
map sb chain set sort=basename;  set sort_reverse=False
map sn chain set sort=natural;   set sort_reverse=False
map sm chain set sort=mtime;     set sort_reverse=False
map sc chain set sort=ctime;     set sort_reverse=False
map sa chain set sort=atime;     set sort_reverse=False
map st chain set sort=type;      set sort_reverse=False
map se chain set sort=extension; set sort_reverse=False

map sS chain set sort=size;      set sort_reverse=True
map sB chain set sort=basename;  set sort_reverse=True
map sN chain set sort=natural;   set sort_reverse=True
map sM chain set sort=mtime;     set sort_reverse=True
map sC chain set sort=ctime;     set sort_reverse=True
map sA chain set sort=atime;     set sort_reverse=True
map sT chain set sort=type;      set sort_reverse=True
map sE chain set sort=extension; set sort_reverse=True
# }}}
# Settings {{{ 
map zc    set collapse_preview!
map zd    set sort_directories_first!
map zh    set show_hidden!
map <C-h> set show_hidden!
map zI    set flushinput!
map zi    set preview_images!
map zm    set mouse_enabled!
map zp    set preview_files!
map zP    set preview_directories!
map zs    set sort_case_insensitive!
map zu    set autoupdate_cumulative_size!
map zv    set use_preview_script!
map zf    console filter%space
# }}}
# Bookmarks {{{
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map b<any>  set_bookmark %any
map ub<any> unset_bookmark %any

map b<bg>   draw_bookmarks
copymap b<bg>  um<bg> `<bg> '<bg>
# }}}
# Generate all the chmod bindings with some python help: {{{
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))
# }}}
# Misc {{{
map dc get_cumulative_size
map so chain eval fm.source(fm.confpath('rc.conf')); eval fm.rifle.reload_config(); echo "rc.conf and rifle have been sourced"

# Filesystem Operations
map cmx chmod 755
map cmw chmod 644

# Diff between 2 files
map D chain shell vimdiff %c %f; uncut

# Soft edit (edit on the same workspace of ranger)
# map e  edit
map e  shell vim %s

# pack/unpack archive file (require atool)
map pk shell apack --format=zip %s.zip %s
map up shell aunpack %s

# downgrade highlight package(s)
map dg shell -r pacman -U %s
# }}}

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic {{{
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

cmap <a-i>   eval fm.ui.console.close()
# }}}
# Move around {{{
cmap <up>      eval fm.ui.console.history_move(-1)
cmap <down>    eval fm.ui.console.history_move(1)
cmap <left>    eval fm.ui.console.move(left=1)
cmap <right>   eval fm.ui.console.move(right=1)
cmap <home>    eval fm.ui.console.move(right=0,  absolute=True)
cmap <end>     eval fm.ui.console.move(right=-1, absolute=True)
cmap <a-left>  eval fm.ui.console.move_word(left=1)
cmap <a-right> eval fm.ui.console.move_word(right=1)

cmap <a-k> eval fm.ui.console.history_move(-1)
cmap <a-j> eval fm.ui.console.history_move(1)
cmap <a-h> eval fm.ui.console.move(left=1)
cmap <a-l> eval fm.ui.console.move(right=1)
cmap <a-n> eval fm.ui.console.move_word(left=1)
cmap <a-m> eval fm.ui.console.move_word(right=1)
# }}}
# Line Editing {{{
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

cmap <a-9> eval  fm.ui.console.delete_word()
cmap <a-0> eval  fm.ui.console.delete_word(backward=False)
cmap <a-d> chain eval fm.ui.console.move(right=-1, absolute=True); eval fm.ui.console.delete_rest(-1)
# }}}
# And of course the emacs way {{{
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false
# }}}

# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement {{{
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>
# }}}
# Basic {{{
pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q i <F3>
pmap E      edit_file
# }}}

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement {{{
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>
# }}}
# Changing priority and deleting tasks {{{
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()
# }}}
# Basic {{{
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>
# }}}

# vim: foldmethod=marker
