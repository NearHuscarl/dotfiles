#!/bin/bash
# ============================================================================
# File:        alias
# Description: Bash custom aliases and other alias functions, some alias have
#              the equivalent completion as the original commands
# Author:      Near Huscarl <near.huscarl@gmail.com>
# Last Change: Thu Feb 01 15:18:12 +07 2018
# Licence:     BSD 3-Clause license
# Note:        N/A
# ============================================================================

# {{{ alias functions
function alias_tree() { # {{{
   local pwd=${1:-$(pwd)}
   find "$pwd" -print | sed -e 's;'"$pwd"';\.;g;s;[^/]*\/;|__;g;s;__|; |;g'
} # }}}
function alias_pac_install() { # {{{
   sudo pacman -S "$@"
   [[ -x $HOME/bin/pacMerge ]] && pacMerge
} # }}}
function alias_nm_connect() { # {{{
	# connect to wifi, example: nmcli dev connect wlo1
	if [[ $# == 0 ]]; then
		nmcli --pretty device connect "$(nmcli device status | awk '/wifi/ {print $1}')"
	# connect to saved wifi
	elif [[ $# == 1 ]]; then
		nmcli --pretty connection up "$1"
	# connect to a new wifi
	elif [[ $# == 2 ]]; then
		nmcli --pretty device wifi connect "$1" password "$2"
	else
		echo 'Too many or few argument(s)'
	fi
} # }}}
function alias_pac_update() { # {{{
   sudo pacman -Syu
   [[ -x $HOME/bin/pac_merge ]] && pac_merge
} # }}}
function alias_pac_list() { # {{{
   pacman -Ql "$1" | grep "${2:-}"
} #}}}
function alias_pac_latest_explicit() { # {{{
   # list nth last explicitly installed packages which is not in base/base-devel group
	max_pkgs="${1:-20}"
   explicit_pkgs=$(comm -23 <(pacman -Qqe | sort) <(pacman -Qqg base base-devel | sort))
	expac -HM --timefmt='%Y-%m-%d %T' '%l\t%-20n\t%m' "$explicit_pkgs"  | sort | tail -n "$max_pkgs"
} # }}}
function alias_pac_latest() { # {{{
	max_pkgs="${1:-20}"
	expac -HM --timefmt="%Y-%m-%d %T" '%l\t%-20n\t%m' | sort | tail -n "$max_pkgs"
} # }}}
function alias_pac_size() { # {{{
	expac -S -HM '%k\t%n' | sort -n | tail -n "${1:-20}"
} # }}}
function alias_pac_dep() { # {{{
   # print package's dependencies
   if [[ $# == 0 ]]; then
      printf 'Please enter a package name\n'
   else
      pacman -Si "$1" | awk -F'[:<=>]' '/^Depends/ {print $2}' | xargs -n1 | sort -u
   fi
} # }}}
function alias_aur_desc() { # {{{
   pacaur -Si "$@" | grep Description | sed -e "s/^Description.*://"
} # }}}
function alias_aur_size() { # {{{
   pacaur -Qi "$@" | grep "Installed Size" | sed -e "s/^Installed Size.*://"
} # }}}
function alias_aur_dependency() { # {{{
   if [[ $# == 0 ]]; then
      printf 'Please enter a package name\n'
   else
      pacman -Qi "$1" | awk -F'[:<=>]' '/^Depends/ {print $2}' | xargs -n1 | sort -u
   fi
} # }}}
function alias_size() { # {{{
   du -h --max-depth="${1:-0}"
} # }}}
function alias_pic() { # {{{
   shopt -s nullglob

   # picture extensions
   local picExt="(jpg|png)"

   # get all *.(jpg|png) of current path
	local allPath=("$(pwd)"/*.@"$picExt")

   # remove $(pwd) prefix, only keep file names
   allPath=("${allPath[@]#"$pwd/"}")

   for i in "${!allPath[@]}"; do
      if [[ "${allPath[$i]}" == "$1" ]]; then
         # open sxiv in 
         # (s)cale mode: (h)eight
         # hide (b)ottom info
         # search dirs (r)ecursively for images
         # open at pic (n)umber <NUM> which is the selected picture
         sxiv -s h -b -n "$((i+1))" *.@$picExt
         shopt -u nullglob
         return 0
      fi
   done
} # }}}
function alias_rgr() { # {{{
   rootDir=$(git rev-parse --show-toplevel 2> /dev/null)
   if [[ "$rootDir" == '' ]]; then
      rg "$@" "$HOME"
   else
      rg "$@" "$rootDir"
   fi
} # }}}
# }}}
# color {{{
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ls="ls --color=auto"
# }}}
# change directory {{{
alias dkt='cd $HOME/Desktop'
alias cdh='cd $HOME'
alias cdp='cd $HOME/Pictures'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
# }}}
# list {{{
alias  la='ls --color=auto -A'
alias  ll='ls --color=auto -oh'
alias lla='ls --color=auto -ohA'
alias  lr='ls --color=auto -R'
alias lss='ls -A    | grep --color=auto -i'
alias lls='ls -Aoh  | grep --color=auto -i'
alias lrs='ls -ARoh | grep --color=auto -i'
alias tree='alias_tree'
# }}}
# vim {{{
if [[ -x /usr/bin/vim ]]; then
	alias view='vim -R'
	alias vim0='vim -u NONE -N'
	alias vimrc='vim $HOME/.vimrc'
	alias nvim-startup='nvim -c q --startuptime /tmp/nvim.log && tail -n1 $_'
	alias nvim-Startup='nvim -c q --startuptime /tmp/nvim.log && nvim $_'
	alias vim-startup='vim -c q --startuptime /tmp/vim.log && tail -n1 $_'
	alias vim-Startup='vim -c q --startuptime /tmp/vim.log && vim $_'
	# vir in $HOME/bin/vir
	if [[ -x ~/bin/viman ]]; then
		alias man='viman'
	fi
fi
# }}}
# network manager {{{
if [[ -x /usr/bin/NetworkManager ]]; then
	alias nm-connect='alias_nm_connect'
	alias nm-disconnect='nmcli dev disconnect $(nmcli device status | awk "/wifi/ {print $1}")'
	alias nm-list='nmcli connection show'
	alias nm-delete='nmcli connection delete'
	alias nm-avail='nmcli dev wifi'
	alias nm-active='nmcli connection show --active'
	# info of active connection
	alias nm-info='nmcli connection show $(nmcli connection show --active | awk "NR == 2 {print $1}")'
fi
# }}}
# pacman {{{
if [[ -x /usr/bin/pacman ]]; then
	alias pac-install='alias_pac_install'
	alias pac-update='alias_pac_update'
	alias pac-remove='sudo pacman -Rs'
	alias pac-search='pacman -Qsq'
	alias pac-Search='pacman -Ssq'
	alias pac-list='alias_pac_list'
	alias pac-orphan='sudo pacman -Rns $(pacman -Qtdq)'           # Remove unused packages (orphans)
	alias pac-info='pacman -Si'
	alias pac-desc='expac -S "%d"'
	alias pac-size='alias_pac_size'                               # Show download size of largest package(s)
	alias pac-latest='alias_pac_latest'                           # List nth last installed packages
	alias pac-Latest='alias_pac_latest_explicit'                  # List nth last explicitly installed packages which is not in base/base-devel group
	alias pac-dep='alias_pac_dependency'                          # Print package's dependencies

	# AUR
	if [[ -x /usr/bin/pacaur ]]; then
		alias aur-install='pacaur -Sa'
		alias aur-clean='pacaur -Sca'
		alias aur-update='pacaur -Syua'
		alias aur-remove='pacaur -Rsa'
		alias aur-search='pacaur -Qsqa'
		alias aur-Search='pacaur -Ssqa'
		alias aur-list='pacman -Qm'
		alias aur-info='pacaur -Sia'
		alias aur-desc='alias_aur_desc'
		alias aur-size='alias_aur_size'
		alias aur-dep='alias_aur_dep'
	fi
fi
# }}}
# git {{{
if [[ -x /usr/bin/git ]]; then
	alias gstat='git status'
	alias gpull='git pull'
	alias gpush='git push'
	alias gfixcommit='git commit --amend'                     # Fix commit msg without altering its snapshot
	alias gfixstage='git commit --amend --reuse-message=HEAD' # Fix commit (staging other files)
	alias gunstage='git reset HEAD'
	alias grestore='git checkout --'
	alias gcheck='git checkout'
	alias gnewbranch='git checkout -b'
	alias gdelbranch='git branch -d'
	alias gremove='git rm --cached'                           # Remove file in vcs while keeping in the local location
	alias gmerge='git merge'
fi
# }}}
# trash-cli {{{
if [[ -x /usr/bin/trash-put ]]; then
	alias rm='trash-put'
fi
# }}}
# xprop {{{
alias xprop-class='xprop WM_CLASS'
alias xprop-role='xprop WM_WINDOW_ROLE'
alias xprop-title='xprop _NET_WM_NAME WM_NAME'
# }}}
# picture {{{
alias wallpaper='nitrogen --random --set-scaled "$HOME/Pictures/low_poly"'
alias schedule='sxiv -f $HOME/Pictures/misc/schedule.png'
alias thumnail='sxiv -f -t -b -r *'
alias pic='alias_pic'
alias sxiv='sxiv -b -s h'
# }}}
# other {{{
alias rtm='killall -USR1 termite' # reload termite config
alias xmod='xmodmap ~/.Xmodmap'
alias xres='xrdb ~/.Xresources'
alias reboot='shutdown -r now'
alias shutoff='$HOME/bin/shutdown'
alias size='alias_size'
alias mkdir='mkdir -pv'
alias top='vtop'
alias internet='$EDITOR $HOME/misc/Internet.txt'
alias music='ncmpcpp'
alias clock='tty-clock -s -c -D -C6'
alias symlink='ln -s'
alias fuck='sudo $(history -p !!)'
alias json='python -m json.tool'
alias battery='upower --show-info $(upower --enumerate | grep BAT) | grep --color=never -E "state|to full|to empty|percentage" | sed "s/^\s*//"'
# }}}
# even shorter aliases {{{
alias r='fc -s'
alias e='exit'
alias c='clear'
alias js='node'
alias py='python'
alias pi='python -i'
alias sb='source $HOME/.bashrc'
# }}}
# apply completion to aliases {{{

# complete -p <command> -> show completion function of that command
# note: if not work. try to source the completion script first by typing the original
# command, then <tab> to trigger to script, and try again

if [ -d /usr/share/bash-completion/completions ]; then
	# Setup {{{
	completionPath='/usr/share/bash-completion/completions'

	# source $completionPath/pacman (_completion_loader pacman works too)
	# _completion_loader pacman
	source $completionPath/pacman
	source $completionPath/git
	source "$HOME"/bin/completion-utils.sh
	# }}}
	# pacman {{{
	complete -o default -F _pacman_S pac-install
	complete -o default -F _pacman_Q pac-remove
	complete -o default -F _pacman_Q pac-search
	complete -o default -F _pacman_S pac-Search
	complete -o default -F _pacman_Q pac-list
	complete -o default -F _pacman_S pac-info
	complete -o default -F _pacman_S pac-desc
	complete -o default -F _pacman_S pac-size
	complete -o default -F _pacman_S pac-dep

	complete -o default -F _pacman_S aur-install
	complete -o default -F _pacman_Q aur-remove
	complete -o default -F _pacman_Q aur-search
	complete -o default -F _pacman_Q aur-info
	complete -o default -F _pacman_Q aur-desc
	complete -o default -F _pacman_Q aur-size
	complete -o default -F _pacman_Q aur-dep
	# }}}
	# git {{{
	# git completion script already have its own function to set up completion
	# for functions or commands, so no need to use complete-wrapper function
	# see https://gist.github.com/JuggoPop/10706934
	__git_complete gcheck     _git_checkout
	__git_complete gnewbranch _git_branch
	__git_complete gmerge     _git_merge

	complete -o default -F _git_branch_d gdelbranch
	# }}}
fi

# }}}

# vim: foldmethod=marker
